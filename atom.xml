<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jdmyy</title>
  
  <subtitle>Leaf</subtitle>
  <link href="https://yelang991115.github.io/atom.xml" rel="self"/>
  
  <link href="https://yelang991115.github.io/"/>
  <updated>2022-10-10T01:00:07.886Z</updated>
  <id>https://yelang991115.github.io/</id>
  
  <author>
    <name>阳鱼</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hw总结2</title>
    <link href="https://yelang991115.github.io/2022/10/10/hw%E6%80%BB%E7%BB%932/"/>
    <id>https://yelang991115.github.io/2022/10/10/hw%E6%80%BB%E7%BB%932/</id>
    <published>2022-10-10T00:51:18.000Z</published>
    <updated>2022-10-10T01:00:07.886Z</updated>
    
    <content type="html"><![CDATA[<p>因为各种复杂问题和莫名其妙的安排，拖了很久才开始写今天的总结。其实后续的总结难免涉及到很多现实隐私的问题，代指abcd了。后来参加的行动是红方，总结一下</p><p>A：一家能源企业，热电类的。暴露公网的登录界面可绕过可用cms通杀直接进后面，可惜的是只是单纯的人事管理系统，尽管可以跳转到另一个考勤和业务app，没有得到后门上传的地方，十分可惜。但是泄露的隐私也很多就是了。</p><p>方法：框架通吃</p><p>B：一家大企业，经典的dump泄露，直接用ana 分析一下找到了内网地址和数据库口令，可惜的是没办法进内网，不过后续同组大佬横向移动的时候涉及到了，小利用了一下。</p><p>方法：dump分析</p><p>C：框架存在sql执行，mssql找一下输一下，看到了默认管理的账户密码，直接登录发现需要验证，但是验证码可以爆破出来。进入系统发现是和A一个母公司，继续向下有个上传口，但是被废弃了，也没找到其他的接口，放弃</p><p>方法：框架漏洞</p><p>D：一个公交相关系统，涉及到公交线路，人员信息等泄露，这个比较有趣，一堆token跑一下字典，进去了。。</p><p>方法：token绕过</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;因为各种复杂问题和莫名其妙的安排，拖了很久才开始写今天的总结。其实后续的总结难免涉及到很多现实隐私的问题，代指abcd了。后来参加的行动是红方，总结一下&lt;/p&gt;
&lt;p&gt;A：一家能源企业，热电类的。暴露公网的登录界面可绕过可用cms通杀直接进后面，可惜的是只是单纯的人事管理系</summary>
      
    
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>hvv以及后续行动总结复盘1</title>
    <link href="https://yelang991115.github.io/2022/08/19/hvv%E4%BB%A5%E5%8F%8A%E5%90%8E%E7%BB%AD%E8%A1%8C%E5%8A%A8%E6%80%BB%E7%BB%93%E5%A4%8D%E7%9B%981/"/>
    <id>https://yelang991115.github.io/2022/08/19/hvv%E4%BB%A5%E5%8F%8A%E5%90%8E%E7%BB%AD%E8%A1%8C%E5%8A%A8%E6%80%BB%E7%BB%93%E5%A4%8D%E7%9B%981/</id>
    <published>2022-08-19T06:12:27.000Z</published>
    <updated>2022-08-19T06:25:54.046Z</updated>
    
    <content type="html"><![CDATA[<p>​    本次hvv主要在蓝方，感受就一个：只要设备上的好，蓝方只用会耍宝。不管是奇安信的天眼还是绿盟的asop，真的非常非常好用。不论是态势感知还是反侦察追踪，这俩个都有很强的能力。但是蓝方最大缺点就是很多情况下上设备也就是上shell。比如这次就有某ty存在0day。</p><p>​    但是归根结底，防守方依赖的东西大多都是已公开或者可能公开的东西。就像杀毒软件肯定比病毒落后是一样的。安全厂商其实也没有我们想的那么牛逼，很多人其实也是混子，基本上也只会点点鼠标。但是从蓝方防守还是能得到红方很多进攻经验，比如针对用户类型使用不同的1day，比如蓝方可以白嫖红队的1day。</p><p>​    后续的行动也是一次省级的攻击测试，最大感受就是如果有一天网上的战争开始了，绝对一秒钟被拿下。很多企业很多漏洞基本上都是一杀通杀，基本上都可以进内网来波大的。许多shell的洞基本上之前都被别人利用过，甚至还有别人写好的马给你使用，简称骑马。</p><p>​    本次常用进内网：shiro，jboss，jira，sql注入，文件上传，通过防火墙等路由设备进入。基本上进入内网随便扫都有若弱口令。个人遇到最多的还是弱口令和注入，少数存在中间件漏洞，例如泛微的前台sql拿管理员账号。可惜没办法传马拿shell。</p><p>​    就弱口令而言，许多人认为的非弱口令其实也很容易被破解出来，这并不是很复杂的事情，很多时候这种渗透靠的就是扫描器的功力。</p><p>​    常见弱口令进攻方法：由无验证登录进入后台，或者字典跑密码，再或者默认口令。进入后台要么越权，要么传马，成功拿shell之后维持后门，再对内网进行攻击。可惜的是本次没有进入过内网，没怎么对内网做事情。</p><h5 id="未完待续"><a href="#未完待续" class="headerlink" title="未完待续"></a>未完待续</h5>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    本次hvv主要在蓝方，感受就一个：只要设备上的好，蓝方只用会耍宝。不管是奇安信的天眼还是绿盟的asop，真的非常非常好用。不论是态势感知还是反侦察追踪，这俩个都有很强的能力。但是蓝方最大缺点就是很多情况下上设备也就是上shell。比如这次就有某ty存在0day。&lt;</summary>
      
    
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/tags/%E5%B7%A5%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>另一种人生的歧路</title>
    <link href="https://yelang991115.github.io/2022/06/24/%E5%8F%A6%E4%B8%80%E7%A7%8D%E4%BA%BA%E7%94%9F%E7%9A%84%E6%AD%A7%E8%B7%AF/"/>
    <id>https://yelang991115.github.io/2022/06/24/%E5%8F%A6%E4%B8%80%E7%A7%8D%E4%BA%BA%E7%94%9F%E7%9A%84%E6%AD%A7%E8%B7%AF/</id>
    <published>2022-06-24T14:24:12.000Z</published>
    <updated>2022-06-24T14:36:48.129Z</updated>
    
    <content type="html"><![CDATA[<p>我总是会在住酒店的时候乱想，写一点感想，可能是因为在家中真的很难静下心来思考一些事情</p><p>我不知道我今天和我当初在南京的酒店有什么变化，不过很多时候我以为我还行的时候确实都不太行。人生是一场旅途，每个人都这样说，但是没人会和你说人生也像克莱因瓶。因为等你意识到这一点的时候你真的已经处于一种静寂的状态，像我现在这样。</p><p>胡思乱想之前可以写小说挣点外快，但似乎真的不适合我，我是那种感情都在脑子里，到手上减一半，到嘴边再减一半。没人可以理解为啥会这个样子，但是事实就是这个样子。</p><p>说了这么多的废话，其实我想表达的就是我以为我可以接受，但是当真的得知了又觉得有一点不开心。或许缘分曾经真的出现了，我没抓住，也有可能我就是一个理想主义的人，就应该被现实打进我的水晶宫，让我破碎。没人会觉得我是个理想主义者吧，我曾经也这样认为。但是当真的现实打破水晶宫，我才知道我对水晶宫的留恋和近乎亏欠的内疚，因为这么久了，我都没有正视这一点。</p><p>理论上应该早一点点题，但是我确实不知道怎么点题，人生的歧路从我高三毕业那一天，或者说高考开始就结束了。我无比怀念我的高三，就像候鸟每年都会回来，但是我没办法，因此怀念堆积起来像谷堆，等到真的开始怀念就像被点了火。我没有长风破浪会有时的魄力，我只能不思量自难忘。我有时候觉得溺死在过去得了，干嘛这么为难自己。可是理想主义者最喜欢的就是为难自己。</p><p>就像走过的岔路口无数次想要回去，哪怕只是一秒钟都想要回去，也不是对自己的亏欠，也不是后悔，有的只是无尽的怅惘与在深夜面向窗户的呢喃。</p><p>人生没有歧路，克莱因瓶没有内外，对我是这样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我总是会在住酒店的时候乱想，写一点感想，可能是因为在家中真的很难静下心来思考一些事情&lt;/p&gt;
&lt;p&gt;我不知道我今天和我当初在南京的酒店有什么变化，不过很多时候我以为我还行的时候确实都不太行。人生是一场旅途，每个人都这样说，但是没人会和你说人生也像克莱因瓶。因为等你意识到这一</summary>
      
    
    
    
    <category term="随感" scheme="https://yelang991115.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
    <category term="情感" scheme="https://yelang991115.github.io/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>近期工作</title>
    <link href="https://yelang991115.github.io/2022/05/26/%E8%BF%91%E6%9C%9F%E5%B7%A5%E4%BD%9C/"/>
    <id>https://yelang991115.github.io/2022/05/26/%E8%BF%91%E6%9C%9F%E5%B7%A5%E4%BD%9C/</id>
    <published>2022-05-26T03:15:28.000Z</published>
    <updated>2022-05-26T03:23:56.411Z</updated>
    
    <content type="html"><![CDATA[<p>好久没更新了，近期忙了一个多月的网络安全检测。最大的感触：</p><p>1.难顶，机房真的很垃圾，非常垃圾。先不说交换机是否支持镜像，甚至大部分机房人都进不去。。</p><p>2.交换机或者路由器老旧严重，非常严重。</p><p>3.没人负责信息化，真的没有一个人。甚至机房门都不知道找谁开。。</p><p>不过近期也有很多好事，比如我混了很久，比如学会了摸鱼和摆烂。尽管我不知道这是好事还是坏事。</p><p>人的一生都在不断前进，只有偶尔的停顿。你以为的倒退其实也是在前进。</p><p>五月的太阳很大，希望未来也可以充满光明。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;好久没更新了，近期忙了一个多月的网络安全检测。最大的感触：&lt;/p&gt;
&lt;p&gt;1.难顶，机房真的很垃圾，非常垃圾。先不说交换机是否支持镜像，甚至大部分机房人都进不去。。&lt;/p&gt;
&lt;p&gt;2.交换机或者路由器老旧严重，非常严重。&lt;/p&gt;
&lt;p&gt;3.没人负责信息化，真的没有一个人。甚</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="情感" scheme="https://yelang991115.github.io/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>随感</title>
    <link href="https://yelang991115.github.io/2022/02/22/%E9%9A%8F%E6%84%9F/"/>
    <id>https://yelang991115.github.io/2022/02/22/%E9%9A%8F%E6%84%9F/</id>
    <published>2022-02-22T00:31:02.000Z</published>
    <updated>2022-02-22T00:45:34.164Z</updated>
    
    <content type="html"><![CDATA[<p>​    很难想象有时候人生路线的变化就在那短短的几秒钟内就被别人决定了，很随意的那种。</p><p>​    我参加这份工作以来，至少有两次是随便被人决定了未来的路。一次是在市公司分配会上，被下放，一次是在区局，再次被下放。我不知道当初那一批人是依据什么被分配到各个单元县区，我也不清楚别人的工作效率和态度。但是我知道自我被分配以来，脑子里就像有个气球，每天都在膨胀。我不清楚为什么会有这么多的事情安排给我，我也不清楚之前没人做这些事情的时候是谁在忙碌。我只知道，很多人面和心善的样子，其实背地里无时无刻不想让你死。</p><p>​    人在社会中有个家庭是很正常的事情，无论你是组建家庭的人还是家庭中的小一辈，家庭理应是你坚强的后盾。当你生活上心理上有问题的时候，你回去寻找家庭进行疏导。我不知道别人如何，但是当我真的向家庭开口说我顶不住的时候，那一定是我真的要不行了。可是在国内最大的问题就是很多家庭中的组成部分对其他部分充满着一种恶意的关怀，也就是重要的事情不对你进行指导和推动，反而在事后和你说一句我就说吧。</p><p>​    有时候我在想，如果当初我没有选择回到家乡发展，当初我没有考虑家庭因素直接选择出国，我没有考虑这么多复杂的事情直接选择自己喜欢的生活，会不会不一样？</p><p>​    我只能把这一切冠以美好的命名：成熟。一个虚假的令我反胃的名词。</p><p>​    很多时候我的苦难不被人理解，是因为这只是我的苦难。如果有一天这种痛苦放大辐射到周围许多人，或许别人能够理解你，但这只是因为别人也在承受痛苦。</p><p>​    半年以来，心中一直有一股气，让我很烦躁，很难过。和谁说都没用，不如让这气放在一旁，哪天爆炸，一起玩完。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    很难想象有时候人生路线的变化就在那短短的几秒钟内就被别人决定了，很随意的那种。&lt;/p&gt;
&lt;p&gt;​    我参加这份工作以来，至少有两次是随便被人决定了未来的路。一次是在市公司分配会上，被下放，一次是在区局，再次被下放。我不知道当初那一批人是依据什么被分配到各个单元</summary>
      
    
    
    
    <category term="随感" scheme="https://yelang991115.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
    <category term="情感" scheme="https://yelang991115.github.io/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>近期</title>
    <link href="https://yelang991115.github.io/2022/01/26/%E8%BF%91%E6%9C%9F/"/>
    <id>https://yelang991115.github.io/2022/01/26/%E8%BF%91%E6%9C%9F/</id>
    <published>2022-01-26T07:45:50.000Z</published>
    <updated>2022-01-26T08:00:22.062Z</updated>
    
    <content type="html"><![CDATA[<p><strong>随时随刻想辞职</strong></p><p>运营商目前存在的问题就是不把人当人</p><p>虽然我心里也清楚在运营商的日子没有那么恶心</p><p>但是没有双休没有日常没有自己Own Life的生活绝对不是我想要的日子</p><p>我不知道该如何转变，除了刷行测，看申论</p><p>没有人能理解为什么受到的折磨如此恶心，因为没有办法让人们感同身受</p><p>今天是小年，没什么好说的，大家小年快乐。</p><p>或许某天上岸了，我会把这个blog转公网也未置可否。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;随时随刻想辞职&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运营商目前存在的问题就是不把人当人&lt;/p&gt;
&lt;p&gt;虽然我心里也清楚在运营商的日子没有那么恶心&lt;/p&gt;
&lt;p&gt;但是没有双休没有日常没有自己Own Life的生活绝对不是我想要的日子&lt;/p&gt;
&lt;p&gt;我不知道该如何转</summary>
      
    
    
    
    <category term="随感" scheme="https://yelang991115.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
    <category term="情感" scheme="https://yelang991115.github.io/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>企业上云2</title>
    <link href="https://yelang991115.github.io/2022/01/13/%E4%BC%81%E4%B8%9A%E4%B8%8A%E4%BA%912/"/>
    <id>https://yelang991115.github.io/2022/01/13/%E4%BC%81%E4%B8%9A%E4%B8%8A%E4%BA%912/</id>
    <published>2022-01-13T01:43:57.000Z</published>
    <updated>2022-01-13T02:01:50.913Z</updated>
    
    <content type="html"><![CDATA[<p><strong>三星上云</strong></p><p>三星主要涉及到业务上云，只需要满足基本的几项考核就行。材料申报方面需要发票的话一律需要进行官网验证，支付凭证以银行流水为主。申报前提必须所申报公司提前三个月就使用了云服务，且为制造业。</p><p><strong>四星上云</strong></p><p>四星上云的特点就是设备上云，四星上云和三星上云没有任何重复的路径，如果是三星上云升级四星上云需要重新进行申报和重新进行出资。三星上云侧重于业务，四星上云侧重于设备，三星补贴5w，四星补贴10w。</p><p>在三星上云和四星上云之间必须间隔一年，也就是一年只能申请一次。四星设备上云一般会采用我们后向的系统，基本可以满足四星上云中的设备需求。</p><p><strong>垫资</strong></p><p>垫资方，电信方，后向方需要进行三方合同的签订。流程：</p><p>​    垫资方–》厂家–》电信；若完成</p><p>​            补贴–》厂家–》垫资方    若失败</p><p>​                    电信–》厂家–》垫资方</p><p>其中成功或者失败垫资方会获得一笔额外收益，电信亏损从营销费用中出。若成功由垫资方出部分作为维系客情关系费用。</p><p><strong>问题关键</strong></p><p>垫资方哪里来是最最重要的问题。有了垫资方才可以让厂家进行申报。许多厂家进行申报的时候根本不愿意出钱。一切问题的核心就是如何进行出资。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;三星上云&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;三星主要涉及到业务上云，只需要满足基本的几项考核就行。材料申报方面需要发票的话一律需要进行官网验证，支付凭证以银行流水为主。申报前提必须所申报公司提前三个月就使用了云服务，且为制造业。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="工业互联网" scheme="https://yelang991115.github.io/tags/%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>2021年终总结</title>
    <link href="https://yelang991115.github.io/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    <id>https://yelang991115.github.io/2021/12/31/2021%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</id>
    <published>2021-12-31T01:57:21.000Z</published>
    <updated>2021-12-31T08:25:41.466Z</updated>
    
    <content type="html"><![CDATA[<p><strong>2021年总结</strong></p><p>​    本年分春夏秋冬四个季节</p><p>春：大学最后六个月前半段，每天都在和舍友聚餐吃饭，在床上装死，在床下开黑。这段时间很爽，也很荒废。这段时间看了学校的鹿，看了学校的天鹅，看了学校没看过呢的地方。说实在的我并不留恋这片地方，因为我在这个大学中留下的回忆没有那么美好，甚至说是折磨。这个春天，我的三个舍友全成了研究生，我起初认为我也找到了自己所爱的工作。</p><p>夏：分别的季节，夏天的前半部分在学校中无所事事像个孤魂野鬼，没什么能锁住我的。下半部分就已经入职了，这也是一个巨大的转变：学生到工作人。然后现实就是一个大棒：校园促销。每天无所事事，坑蒙拐骗？或许吧，反正目的就是卡。这个部分直接略过不谈，没什么好说的。</p><p>秋：平淡无奇</p><p>冬：分到了区局，名义上的工业互联网负责人，实际上的标书机器。每天的任务在有项目的时候忙的不行，没有项目的时候闲的要死。然后经历了区局恐怖的折磨明白一个道理：钱不好赚，但是时间会帮你赚钱，甚至时间帮你赚时间，只要你资历够。说实在的，写标书成长了不少，但是乏善可陈。毕竟 标书这个东西，他只是组装。</p><p>但是我利用时间，摸鱼学习：网络安全，学习python，学习一切可以让我逃离区局的事情。</p><p>今年最大的幸福：好聚好散</p><p>最大的遗憾：只吃了饭，没说话</p><p>最爽的瞬间：年终奖到账</p><p>最后悔的事情：公务员考试没认真</p><p>2021到此为止，2022继续努力。</p><p>16点25分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;2021年总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    本年分春夏秋冬四个季节&lt;/p&gt;
&lt;p&gt;春：大学最后六个月前半段，每天都在和舍友聚餐吃饭，在床上装死，在床下开黑。这段时间很爽，也很荒废。这段时间看了学校的鹿，看了学校的天鹅，看了学校没看过呢的地方。说</summary>
      
    
    
    
    <category term="随感" scheme="https://yelang991115.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
    <category term="情感" scheme="https://yelang991115.github.io/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>sqlmap使用</title>
    <link href="https://yelang991115.github.io/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/"/>
    <id>https://yelang991115.github.io/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/</id>
    <published>2021-12-28T06:37:44.000Z</published>
    <updated>2021-12-28T07:08:14.453Z</updated>
    
    <content type="html"><![CDATA[<p>u 指定目标URL (可以是http协议也可以是https协议)</p><p>-d 连接数据库</p><p>–dbs 列出所有的数据库</p><p>–current-db 列出当前数据库</p><p>–tables 列出当前的表</p><p>–columns 列出当前的列</p><p>-D 选择使用哪个数据库</p><p>-T 选择使用哪个表</p><p>-C 选择使用哪个列</p><p>–dump 获取字段中的数据</p><p>–batch 自动选择yes</p><p>–smart 启发式快速判断，节约浪费时间</p><p>–forms 尝试使用post注入</p><p>-r 加载文件中的HTTP请求（本地保存的请求包txt文件）</p><p>-l 加载文件中的HTTP请求（本地保存的请求包日志文件）</p><p>-g 自动获取Google搜索的前一百个结果，对有GET参数的URL测试</p><p>-o 开启所有默认性能优化</p><p>–tamper 调用脚本进行注入</p><p>-v 指定sqlmap的回显等级</p><p>–delay 设置多久访问一次</p><p>–os-shell 获取主机shell，一般不太好用，因为没权限</p><p>-m 批量操作</p><p>-c 指定配置文件，会按照该配置文件执行动作</p><p>-data data指定的数据会当做post数据提交</p><p>-timeout 设定超时时间</p><p>-level 设置注入探测等级</p><p>–risk 风险等级</p><p>–identify-waf 检测防火墙类型</p><p>–param-del=”分割符” 设置参数的分割符</p><p>–skip-urlencode 不进行url编码</p><p>–keep-alive 设置持久连接，加快探测速度</p><p>–null-connection 检索没有body响应的内容，多用于盲注</p><p>–thread 最大为10 设置多线程</p><p>–delay</p><p>有些web服务器请求访问太过频繁可能会被防火墙拦截，使用–delay就可以设定两次http请求的延时</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151456514-1711486895.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151456514-1711486895.png" class><p>–safe-url</p><p>有的web服务器会在多次错误的访问请求后屏蔽所有请求，使用–safe-url 就可以每隔一段时间去访问一个正常的页面。</p><p>–tamper</p><p>语法：–tamper [“脚本名称”]</p><p>当调用多个脚本的时候，脚本之间用逗号隔开，调用的脚本在 sqlmap文件夹下的 tamper 文件夹中</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151519803-1307292460.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151519803-1307292460.png" class><p>脚本信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">apostrophemask.py       用UTF-8全角字符替换单引号字符</span><br><span class="line">apostrophenullencode.py    用非法双字节unicode字符替换单引号字符</span><br><span class="line">appendnullbyte.py       在payload末尾添加空字符编码</span><br><span class="line">base64encode.py        对给定的payload全部字符使用Base64编码</span><br><span class="line">between.py           分别用“NOT BETWEEN 0 AND #”替换大于号“&gt;”，“BETWEEN # AND #”替换等于号“=”</span><br><span class="line">bluecoat.py          在SQL语句之后用有效的随机空白符替换空格符，随后用“LIKE”替换等于号“=”</span><br><span class="line">chardoubleencode.py      对给定的payload全部字符使用双重URL编码（不处理已经编码的字符）</span><br><span class="line">charencode.py         对给定的payload全部字符使用URL编码（不处理已经编码的字符）</span><br><span class="line">charunicodeencode.py      对给定的payload的非编码字符使用Unicode URL编码（不处理已经编码的字符）</span><br><span class="line">concat2concatws.py      用“CONCAT_WS(MID(CHAR(0), 0, 0), A, B)”替换像“CONCAT(A, B)”的实例</span><br><span class="line">equaltolike.py        用“LIKE”运算符替换全部等于号“=”</span><br><span class="line">greatest.py          用“GREATEST”函数替换大于号“&gt;”</span><br><span class="line">halfversionedmorekeywords.py 在每个关键字之前添加MySQL注释``</span><br><span class="line">ifnull2ifisnull.py      用“IF(ISNULL(A), B, A)”替换像“IFNULL(A, B)”的实例``</span><br><span class="line">lowercase.py         用小写值替换每个关键字字符``</span><br><span class="line">modsecurityversioned.py    用注释包围完整的查询``</span><br><span class="line">modsecurityzeroversioned.py  用当中带有数字零的注释包围完整的查询``</span><br><span class="line">multiplespaces.py       在SQL关键字周围添加多个空格``</span><br><span class="line">nonrecursivereplacement.py  用representations替换预定义SQL关键字，适用于过滤器``</span><br><span class="line">overlongutf8.py        转换给定的payload当中的所有字符``</span><br><span class="line">percentage.py         在每个字符之前添加一个百分号``</span><br><span class="line">randomcase.py         随机转换每个关键字字符的大小写``</span><br><span class="line">randomcomments.py       向SQL关键字中插入随机注释``</span><br><span class="line">securesphere.py        添加经过特殊构造的字符串``</span><br><span class="line">sp_password.py        向payload末尾添加“sp_password” ``for` `automatic obfuscation ``from` `DBMS logs``</span><br><span class="line">space2comment.py       用“``/**/``”替换空格符``</span><br><span class="line">space2dash.py         用破折号注释符“--”其次是一个随机字符串和一个换行符替换空格符``</span><br><span class="line">space2hash.py         用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符``</span><br><span class="line">space2morehash.py       用磅注释符“#”其次是一个随机字符串和一个换行符替换空格符``</span><br><span class="line">space2mssqlblank.py      用一组有效的备选字符集当中的随机空白符替换空格符``</span><br><span class="line">space2mssqlhash.py      用磅注释符“#”其次是一个换行符替换空格符``</span><br><span class="line">space2mysqlblank.py      用一组有效的备选字符集当中的随机空白符替换空格符``</span><br><span class="line">space2mysqldash.py      用破折号注释符“--”其次是一个换行符替换空格符``</span><br><span class="line">space2plus.py         用加号“+”替换空格符``space2randomblank.py     用一组有效的备选字符集当中的随机空白符替换空格符``</span><br><span class="line">unionalltounion.py      用“UNION SELECT”替换“UNION ALL SELECT”``</span><br><span class="line">unmagicquotes.py       用一个多字节组合%bf%27和末尾通用注释一起替换空格符 宽字节注入``</span><br><span class="line">varnish.py          添加一个HTTP头“X-originating-IP”来绕过WAF``</span><br><span class="line">versionedkeywords.py     用MySQL注释包围每个非函数关键字``</span><br><span class="line">versionedmorekeywords.py   用MySQL注释包围每个关键字``</span><br><span class="line">xforwardedfor.py       添加一个伪造的HTTP头“X-Forwarded-For”来绕过WAF</span><br></pre></td></tr></table></figure><p>-v [“x”]</p><p>使用sqlmap注入测试时，可以使用 -v [x] 参数来指定回显信息的复杂程度, x 的取值范围为[0~6]:</p><table><thead><tr><th>等级</th><th>解释</th></tr></thead><tbody><tr><td>0</td><td>只显示python错误以及严重信息</td></tr><tr><td>1</td><td>同时显示基本信息和警告信息</td></tr><tr><td>2</td><td>同时显示debug信息</td></tr><tr><td>3</td><td>同时显示注入的pyload</td></tr><tr><td>4</td><td>同时显示HTTP请求</td></tr><tr><td>5</td><td>同时显示HTTP相应头</td></tr><tr><td>6</td><td>同时显示HTTP相应页面</td></tr></tbody></table><p>–level</p><p>level有5个等级，默认等级为1，进行Cookie测试时使用–level 2 ，进行use-agent或refer测试时使用–level 3 ，进行 host 测试时使用–level 5</p><p>–-os-cmd=[“命令”] 或 –os-shell=[“命令”] 执行系统命令</p><p>利用sql-labs-less1测试 whoami 命令</p><p>sqlmap -u “<a href="http://192.168.0.6/sqli-labs-master/Less-1/?id=1&quot;">http://192.168.0.6/sqli-labs-master/Less-1/?id=1&quot;</a> –os-cmd=whoami</p><p>选择web服务器支持的语言</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151635279-2118068840.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151635279-2118068840.png" class><p> 选择web服务器的可写目录</p><p>[1] 使用默认的</p><p>[2] 自定义位置</p><p>[3] 自定义目录列表文件</p><p>[4] 暴力搜索</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151702257-1189449138.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151702257-1189449138.png" class><p>我在本地测试，节省时间，我选择2 ，自定义路径，然后把路径输入在下面</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151733621-1581490111.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151733621-1581490111.png" class><p>执行命令后的返回结果</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151806421-74759405.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151806421-74759405.png" class><p>以下关卡均可用get型的方法，常规注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">step1：sqlmap -u [``&quot;URL&quot;``] ``//测试是否存在注入``step2：sqlmap -u [``&quot;URL&quot;``] -current-db ``//查询当前数据库``step3：sqlmap -u [``&quot;URL&quot;``] -D [``&quot;数据库名&quot;``] --tables ``//查询当前数据库中的所有表``step4：sqlmap -u [``&quot;URL&quot;``] -D [``&quot;数据库名&quot;``] -T [``&quot;表名&quot;``] --columns ``//查询指定库中指定表的所有列(字段)``step5：sqlmap -u [``&quot;URL&quot;``] -D [``&quot;数据库名&quot;``] -T [``&quot;表名&quot;``] -C [``&quot;列名&quot;``] --dump ``//打印出指定库中指定表指定列中的字段内容</span><br></pre></td></tr></table></figure><table><thead><tr><th>GET型</th><th>关卡</th><th>类型</th></tr></thead><tbody><tr><td>sql-labs-less1</td><td>GET单引号字符型注入</td><td></td></tr><tr><td>sql-labs-less2</td><td>数字型注入</td><td></td></tr><tr><td>sql-labs-less3</td><td>有括号的单引号报错注入</td><td></td></tr><tr><td>sql-labs-less4</td><td>有括号的双引号报错注入</td><td></td></tr><tr><td>sql-labs-less5</td><td>单引号二次注入</td><td></td></tr><tr><td>sql-labs-less6</td><td>双引号二次注入</td><td></td></tr><tr><td>sql-labs-less7</td><td>文件导入导出</td><td></td></tr><tr><td>sql-labs-less8</td><td>布尔型盲注</td><td></td></tr><tr><td>sql-labs-less9</td><td>时间型盲注</td><td></td></tr><tr><td>sql-labs-less10</td><td>双引号时间盲注</td><td></td></tr></tbody></table><p><strong>sql注入检测</strong></p><p>get型：</p><p>语法：sqlmap -u [“url”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u http:``//192.168.0.6/sqli-labs-master/Less-1/?id=1</span><br></pre></td></tr></table></figure><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151930386-645776702.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151930386-645776702.png" class><p> post型：</p><p>先使用bp把提交的数据包保存下来</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228151958055-714953647.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228151958055-714953647.png" class><p>或者直接</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152022974-2039342730.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152022974-2039342730.png" class><p>加上post提交的参数</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152049093-1783494324.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152049093-1783494324.png" class><p>语法：sqlmap -r [“请求包的txt文件”]</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r ``&quot;/root/.sqlmap/post.txt&quot;</span><br></pre></td></tr></table></figure><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152125964-1001626819.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152125964-1001626819.png" class><p>sql-labs -less1~sql-labs-less9</p><p>获取当前数据库名称：</p><p>语法：sqlmap -u [“url”] –current-db</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u ``&quot;http://192.168.0.6/sqli-labs-master/Less-1/?id=1&quot;` `--current-db</span><br></pre></td></tr></table></figure><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152210401-926604687.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152210401-926604687.png" class><p>获取指定数据库的表名：</p><p>语法：sqlmap -u [“url”] -D [‘数据库名’] –tables</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u ``&quot;192.168.0.6/sqli-labs-master/Less-1/?id=1&quot;` `-D security --tables</span><br></pre></td></tr></table></figure><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152248253-239195520.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152248253-239195520.png" class><p>获取指定数据库指定表中的字段：</p><p>语法：sqlmap -u [“url”] -D [‘数据库名’] -T[‘表名’] –columns</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u ``&quot;192.168.0.6/sqli-labs-master/Less-1/?id=1&quot;` `-D security -T users --columns</span><br></pre></td></tr></table></figure><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152323318-1727876213.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152323318-1727876213.png" class><p>获取指定数据库指定表的指定字段的字段内容：</p><p>语法：sqlmap -u [“url”] -D [‘数据库名’] -T [‘表名’] -C [‘字段名1,字段名2,…’] –dump</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u ``&quot;192.168.0.6/sqli-labs-master/Less-1/?id=1&quot;` `-D security -T users -C password --dump</span><br></pre></td></tr></table></figure><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152357877-1501134120.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152357877-1501134120.png" class><p> sql-labs-less10</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u ``&quot;http://192.168.0.6/sqli-labs-master/Less-10/?id=1&quot;` `--current-db</span><br></pre></td></tr></table></figure><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152432412-684588892.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152432412-684588892.png" class><p>提升等级 -level 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u ``&quot;http://192.168.0.6/sqli-labs-master/Less-10/?id=1&quot;` `-level 2 --current-db</span><br></pre></td></tr></table></figure><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152505387-1224887307.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152505387-1224887307.png" class><p> sql-labs-less11~less17常规 POST 注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">step1：sqlmap -r [``&quot;请求头文本&quot;``] ``//测试是否存在注入``step2：sqlmap -r [``&quot;请求头文本&quot;``] --current-db ``//查询当前数据库``step3：sqlmap -r [``&quot;请求头文本&quot;``] -D [``&quot;数据库名&quot;``] --tables ``//查询当前数据库的所有表``step4：sqlmap -r [``&quot;请求头文本&quot;``] -D [``&quot;数据库名&quot;``] -T [``&quot;表名&quot;``] --columns ``//查询指定库指定表的所有列``step5：sqlmap -r [``&quot;请求头文本&quot;``] -D [``&quot;数据库名&quot;``] -T [``&quot;表名&quot;``] -C [``&quot;列名&quot;``] --dump ``//打印出指定库指定表指定列的所有字段内容</span><br></pre></td></tr></table></figure><table><thead><tr><th>POST</th><th>关卡</th><th>类型</th></tr></thead><tbody><tr><td>sql-labs-less11</td><td>基于错误的单引号字符型注入</td><td></td></tr><tr><td>sql-labs-less12</td><td>基于错误的双引号字符型注入</td><td></td></tr><tr><td>sql-labs-less13</td><td>单引号变形双注入</td><td></td></tr><tr><td>sql-labs-less14</td><td>双引号变形双注入</td><td></td></tr><tr><td>sql-labs-less15</td><td>Bool型时间延迟单引号盲注</td><td></td></tr><tr><td>sql-labs-less16</td><td>Bool型时间延迟双引号盲注</td><td></td></tr><tr><td>sql-labs-less17</td><td>更新查询注入</td><td></td></tr><tr><td>sql-labs-less18</td><td>Uagent注入</td><td></td></tr><tr><td>sql-labs-less19</td><td>Referer注入</td><td></td></tr><tr><td>sql-labs-less20</td><td>Cookie注入</td><td></td></tr></tbody></table><p>sql-labs-less18</p><p>Header injection - Uagent</p><p>sqlmap 在对user-agent 注入的时候，得在文件中的user-agent的参数后面加上 *</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152554163-1630671202.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152554163-1630671202.png" class><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152611779-579182967.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152611779-579182967.png" class><p>或者不加 * 号，调用 –level参数，将等级调至 3级，只有等级为 3级即以上时才能对 user-agent进行注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -r ``&quot;/root/.sqlmap/post.txt&quot;` `-level 3</span><br></pre></td></tr></table></figure><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152647537-475388951.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152647537-475388951.png" class><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152700171-1261732802.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152700171-1261732802.png" class><p>sql-labs-less19</p><p>Header injection - Referer</p><p>对Referer注入和User-agent相同，要么是在Referer后面加上 *</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152721756-42617243.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152721756-42617243.png" class><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152734385-190031507.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152734385-190031507.png" class><p>或者将 level 调至 3 级</p><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152805016-591550843.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152805016-591550843.png" class><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152817521-598627350.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152817521-598627350.png" class><p>sql-labs-less20</p><p>Header injection -Cookie</p><p>语法：sqlmap -u [“url”] –cookie [“cookie信息”] –level 2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlmap -u ``&quot;http://192.168.0.6/sqli-labs-master/Less-20/index.php&quot;` `--cookie ``&quot;pma_lang=zh_CN;pma_mcrypt_iv=AoXpKxU5KcY%3D;pmaUser-1=7%2FwV%2BDOfbmI%3D;uname=admin;&quot;` `--level 2</span><br></pre></td></tr></table></figure><p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152852535-804553983.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152852535-804553983.png" class><p> <img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/Blog\source_posts\sqlmap使用\1631512-20200228152905550-838565401.png" alt="img"></p><img src="/2021/12/28/sqlmap%E4%BD%BF%E7%94%A8/1631512-20200228152905550-838565401.png" class><p><strong>本文转载自CNBlogs Angle-史迪仔</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;u 指定目标URL (可以是http协议也可以是https协议)&lt;/p&gt;
&lt;p&gt;-d 连接数据库&lt;/p&gt;
&lt;p&gt;–dbs 列出所有的数据库&lt;/p&gt;
&lt;p&gt;–current-db 列出当前数据库&lt;/p&gt;
&lt;p&gt;–tables 列出当前的表&lt;/p&gt;
&lt;p&gt;–columns 列出</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="网安" scheme="https://yelang991115.github.io/tags/%E7%BD%91%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>pikachu</title>
    <link href="https://yelang991115.github.io/2021/12/27/pikachu/"/>
    <id>https://yelang991115.github.io/2021/12/27/pikachu/</id>
    <published>2021-12-27T05:00:04.000Z</published>
    <updated>2021-12-27T05:20:02.301Z</updated>
    
    <content type="html"><![CDATA[<p><strong>pikachu1</strong></p><p>​    表单用户名密码破解</p><p>根据验证码类型：1，长期有效：输入burp后直接进入爆破</p><p>2，前端有效，直接忽视</p><p>3，token验证：截取token进行爆破：时间很长极大计算</p><p>4，无token无验证码：爆破直接</p><p>爆破方法：根据burp中加入弱口令合集，抓取请求后包中出现账号密码进行选中后破解。将包发送到入侵器中进行变量检索字典配置进行爆破，根据返回长度不同确定是否成功。</p><p>token爆破中要再重发器中加入选中的valuetoken，由系统进行线程1的自主选择token进行爆破。</p><p>密码爆破本质是：1，弱口令可猜测可计算小。2，包中明文密码或用户名。3，无安全解决措施。</p><p>解决：复杂密码，加密数据包，加入二次验证。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;pikachu1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    表单用户名密码破解&lt;/p&gt;
&lt;p&gt;根据验证码类型：1，长期有效：输入burp后直接进入爆破&lt;/p&gt;
&lt;p&gt;2，前端有效，直接忽视&lt;/p&gt;
&lt;p&gt;3，token验证：截取token进行爆破：时间很长极</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="网安" scheme="https://yelang991115.github.io/tags/%E7%BD%91%E5%AE%89/"/>
    
  </entry>
  
  <entry>
    <title>第一次投标</title>
    <link href="https://yelang991115.github.io/2021/12/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8A%95%E6%A0%87/"/>
    <id>https://yelang991115.github.io/2021/12/21/%E7%AC%AC%E4%B8%80%E6%AC%A1%E6%8A%95%E6%A0%87/</id>
    <published>2021-12-21T07:41:57.000Z</published>
    <updated>2021-12-21T07:52:56.484Z</updated>
    
    <content type="html"><![CDATA[<p>2021.12.21，124年一次的二连冬至日。</p><p>今日完成某无人机投标全流程，总结：</p><ol><li>细心工作大于一切</li><li>印章公章合理使用</li><li>产品型号匹配</li><li>明细报价产地匹配</li><li>售后质保期匹配</li><li>售后工程名匹配</li><li>全文件主题名称一致</li><li>资质社保全匹配</li></ol><p>其他的也就是审核审核审核，投标不难，标书不难，不出错难难难！</p><p>没人能保证在几百页文件中不出现错误，但是当合适的进行分化进行分工，集中办公且有专业人员进行指导就可以出错降为最低。在合理控制相关技术参数后，不要被<strong>废标</strong>是重中之重。</p><p>快到年底了，注意保暖防寒。</p><p>年终奖也出了，短暂的幸福。</p><p>2021即将结束，元旦左右出个总结。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;2021.12.21，124年一次的二连冬至日。&lt;/p&gt;
&lt;p&gt;今日完成某无人机投标全流程，总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;细心工作大于一切&lt;/li&gt;
&lt;li&gt;印章公章合理使用&lt;/li&gt;
&lt;li&gt;产品型号匹配&lt;/li&gt;
&lt;li&gt;明细报价产地匹配&lt;/li&gt;
&lt;li&gt;售后质保</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="日常" scheme="https://yelang991115.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>DevOps初步认识</title>
    <link href="https://yelang991115.github.io/2021/12/14/DevOps%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/"/>
    <id>https://yelang991115.github.io/2021/12/14/DevOps%E5%88%9D%E6%AD%A5%E8%AE%A4%E8%AF%86/</id>
    <published>2021-12-14T01:02:35.000Z</published>
    <updated>2021-12-14T01:29:18.730Z</updated>
    
    <content type="html"><![CDATA[<p>​    DeVOps：development和operation的组合词汇，目的是让开发者和运维者统一结合起来。最终目的是为了软件更加可靠和便捷。</p><p><strong>概念提出：</strong>传统的开发模式为<strong>单体架构+瀑布模式</strong>开发，也就是单纯的系统=》数据库的对应关系，也像我们当初自己大学时候自娱自乐的开发demo的玩法，由于项目小可以一个人承担多个角色，出现相关问题只需要在线上查看相关的日志即可解决。开发模式也就采用瀑布流开发模式。</p><p>​    当业务发展逐渐变得繁杂，功能模块变得越来越多，这就导致传统的单体架构+瀑布开发无法满足项目开发需求或满足需求会导致运维十分困难，并且当nginx，cdn等相关基础技术的加入让传统开发模式变得更加不适用起来。并且当多个项目同步进行 的时候不可避免的会出现不同的任务目标和不同的编程语言。这样一个大的项目会被分解为多个小的项目目标，并为了保证项目进行的顺利，在每个阶段都会有对应的测试人员对相关项目进行简单的验收。这个时候采用的方法主要是<strong>分布式架构+敏捷开发</strong>，所采用的也是Dev+Ops。这个时候的运维主要负责运维而不参与其他环节。    而这样导致的问题就是开发和运维被对立起来，运维的主要目的就是稳定，而开发人员为了功能发展就会产生很多 变动。</p><p>​    为了改变这种困境，<strong>微服务+DevOps</strong>应运而生。在大项目多语言复杂开发的环境下，将项目<strong>解耦</strong>多次部署，才能确保在部分服务出现问题后不会对其他项目造成影响。而现在运维所做的工作就是将不同的服务部署在不同的服务器，并将相关业务外包到云服务厂商，所涉及的问题逐步沉淀到平台上处理，这样就解决了运维与开发的对立：直接让开发承担运维工作。这也就是初步的DevOps的定义。而现如今DevOps已经变成一种更为广泛的概念。DevOps：人 People+流程 Process+平台 Platform。</p><p><strong>人 + 流程 = 文化</strong></p><p><strong>流程 + 平台 = 工具</strong></p><p><strong>平台 + 人 = 赋能</strong></p><p>一个完成度高的DevOps平台包含：</p><p><code>项目管理（PM）</code>：jira。运营可以上去提问题，可以看到各个问题的完整的工作流，待解决未解决等；</p><p><code>代码管理</code>：gitlab。jenkins或者K8S都可以集成gitlab，进行代码管理，上线，回滚等；</p><p><code>持续集成CI（Continuous Integration）</code>：<a href="https://www.zhihu.com/search?q=gitlab+ci&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1755254160%7D">gitlab ci</a>。开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。</p><p><code>持续交付CD（Continuous Delivery）</code>：<a href="https://www.zhihu.com/search?q=gitlab+cd&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1755254160%7D">gitlab cd</a>。完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p><p><code>镜像仓库</code>：VMware Harbor，私服nexus。</p><p><code>容器</code>：Docker。</p><p><code>编排</code>：K8S。</p><p><code>服务治理</code>：Consul。</p><p><code>脚本语言</code>：Python。</p><p><code>日志管理</code>：Cat+Sentry，还有种常用的是ELK。</p><p><code>系统监控</code>：Prometheus。</p><p><code>负载均衡</code>：Nginx。</p><p><code>网关</code>：Kong，zuul。</p><p><code>链路追踪</code>：Zipkin。</p><p><code>产品和UI图</code>：<a href="https://www.zhihu.com/search?q=%E8%93%9D%E6%B9%96&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1755254160%7D">蓝湖</a>。</p><p><code>公司内部文档</code>：Confluence。</p><p><code>报警</code>：推送到工作群。</p><p>这样整体的开发流程已经可以高度协同。</p><p>——————知乎 小龙飞</p><p>​    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;​    DeVOps：development和operation的组合词汇，目的是让开发者和运维者统一结合起来。最终目的是为了软件更加可靠和便捷。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;概念提出：&lt;/strong&gt;传统的开发模式为&lt;strong&gt;单体架构+瀑布模式&lt;/strong</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="学习" scheme="https://yelang991115.github.io/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>第一日工作（正式</title>
    <link href="https://yelang991115.github.io/2021/12/13/%E7%AC%AC%E4%B8%80%E6%97%A5%E5%B7%A5%E4%BD%9C%EF%BC%88%E6%AD%A3%E5%BC%8F/"/>
    <id>https://yelang991115.github.io/2021/12/13/%E7%AC%AC%E4%B8%80%E6%97%A5%E5%B7%A5%E4%BD%9C%EF%BC%88%E6%AD%A3%E5%BC%8F/</id>
    <published>2021-12-13T09:05:13.000Z</published>
    <updated>2021-12-14T01:29:23.720Z</updated>
    
    <content type="html"><![CDATA[<p>本以为会把我分在离家近的局，结果发现领导很忙（虽然我不知道在忙啥）。。</p><p>今日最大收获就是知道了大家都在混（或者只有我在混。。</p><p>那个局的领导人好像不想要支撑人员。。搞得我很尴尬，也没有别人带着我做相关工作。</p><p>考虑买个IPAD用来刷题，大家都在准备GWY，努力慢慢弄把，第一天没啥好说的。基金也是红的。</p><p>–下班！</p><p>17点09分</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本以为会把我分在离家近的局，结果发现领导很忙（虽然我不知道在忙啥）。。&lt;/p&gt;
&lt;p&gt;今日最大收获就是知道了大家都在混（或者只有我在混。。&lt;/p&gt;
&lt;p&gt;那个局的领导人好像不想要支撑人员。。搞得我很尴尬，也没有别人带着我做相关工作。&lt;/p&gt;
&lt;p&gt;考虑买个IPAD用来刷题，</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="日常" scheme="https://yelang991115.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>企业上云</title>
    <link href="https://yelang991115.github.io/2021/12/10/%E4%BC%81%E4%B8%9A%E4%B8%8A%E4%BA%91/"/>
    <id>https://yelang991115.github.io/2021/12/10/%E4%BC%81%E4%B8%9A%E4%B8%8A%E4%BA%91/</id>
    <published>2021-12-10T00:49:18.000Z</published>
    <updated>2021-12-14T01:29:11.490Z</updated>
    
    <content type="html"><![CDATA[<h3 id="企业上云"><a href="#企业上云" class="headerlink" title="企业上云:"></a>企业上云:</h3><p>​    企业上云是指企业通过互联网技术与云计算技术方式，连接社会性资源、共享平台及工作内容等，从而开展信息化管理基础设施建设、管理方法、业务流程等运用的全过程。简言之即将企业各个部分的内容都连接上网，方便其统一利用管理和调配的一种方式。换言之企业上云从技术层面可以优化企业管理和生产流程从而满<strong>足降本增效</strong>的需求，也可以满足安全容灾的需求。并且将相关的ERP系统放在云上之后可以满足更稳定的网络链接。除此之外，还有各地为了企业上云而提供的<strong>奖励</strong>。</p><p>​    基本规范流程如下：</p><img src="/2021/12/10/%E4%BC%81%E4%B8%9A%E4%B8%8A%E4%BA%91/%E6%B5%81%E7%A8%8B%E5%9B%BE.PNG" class><p>​    在上云方面分为无ERP上云和已有ERP上云。无ERP上云可以通过相关厂商进行合作搭建自由ERP。已有ERP在本地IDC中的可以通过云专线或者VPN完成数据库转移到RDS。与此同时在上云之后还可以为企业满足云备份和OBS的需求。</p><p>​    目前上云类型分为三星到五星上云，根据公司所购买的不同云服务形式给予不同的上云评级。从企业申请到材料审核到最后的评定审核。省经信委会定期将通过企业上云的企业进行公示。其中所需主要信息上云表如下：</p><img src="/2021/12/10/%E4%BC%81%E4%B8%9A%E4%B8%8A%E4%BA%91/%E4%B8%8A%E4%BA%91%E8%A1%A8.PNG" class><p>​    央企行业由于对系统稳定、数据安全有着较高要求，因此企业上云的整体架构以专属云+私有云+云管平台为主。 专属云：针对企业非核心应用、非关键应用，使用专属云来承载。 私有云：针对企业核心应用、保存核心数据建议使用私有云来承载。 在专属云和私有云的基础之上我们实现了统一的云管平台，帮助企业统一管理所有云资源。</p><p>​    企业上云不仅可以满足目前大势所趋的数字化转型经济的需求，也可以解决目前存在的能耗问题。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;企业上云&quot;&gt;&lt;a href=&quot;#企业上云&quot; class=&quot;headerlink&quot; title=&quot;企业上云:&quot;&gt;&lt;/a&gt;企业上云:&lt;/h3&gt;&lt;p&gt;​    企业上云是指企业通过互联网技术与云计算技术方式，连接社会性资源、共享平台及工作内容等，从而开展信息化管理基础设</summary>
      
    
    
    
    <category term="工作" scheme="https://yelang991115.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="工业互联网" scheme="https://yelang991115.github.io/tags/%E5%B7%A5%E4%B8%9A%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>南京随感</title>
    <link href="https://yelang991115.github.io/2021/12/09/%E2%80%9C%E6%AC%A2%E8%BF%8E%E5%85%89%E4%B8%B4%EF%BC%81%E2%80%9D/"/>
    <id>https://yelang991115.github.io/2021/12/09/%E2%80%9C%E6%AC%A2%E8%BF%8E%E5%85%89%E4%B8%B4%EF%BC%81%E2%80%9D/</id>
    <published>2021-12-09T05:59:29.989Z</published>
    <updated>2021-12-09T06:00:19.250Z</updated>
    
    <content type="html"><![CDATA[<p>“欢迎光临！”</p><p>现在的菜馆都喜欢搞这套的，带着点上扬的光，抑扬顿挫。</p><p>“你可不能嘲笑她们！”那倒是，你毕竟也是在服务业，每天在柜台旁对着老头老太太，对着暴发户在那里欢迎光临。我不会点菜，让我自己选我是一定不会来这个餐馆的，但是她选择了这个餐馆我也不会拒绝就是了。花菜，鸡翅，芝士南瓜。我就点这个，你看看你要吃点啥？她把口罩拿下来，和高中时候一点没变。</p><p>我接过菜单，翻来覆去也没啥适合我的口味，牛仔骨？我反问她。“我不吃牛、羊、鱼。”我沉默了一下，但是点都点了，我也没让服务员划去。如果是高三的时候都不用提起话题，而是自然而然的聊起来。”你来南京是培训吗，来几天？“我把这次来的任务和她说而一下，她只是哦了一下。我和她也快一年没见了，上次见面还是她来我们学校考研。她拿出手机解锁屏幕然后锁上屏幕，又掏出一根唇膏抹了一下。坦白的讲，我是讨厌大城市的，因为我这种乡下来的泥腿子对大城市有畏惧感，这种畏惧感转换成一种讨厌，但是不得不承认南京确实很繁华，我从住的地方到新街口见识了真正的钢铁洪流，堵得我有点窒息。</p><p>你在南京过的咋样？我向来直接开门见山的。还行吧，一个月到手7.5K，和两个人合租一个月1.5K。又是一阵沉默。服务员把山药端了上来，我没动筷子，因为到这边的时候在酒店吃了点自主。“这山药还不错，挺好吃的！”听着她这样说我才开始尝菜。之后就是沉默的吃饭和若有若无的聊天。</p><p>“我早都想请你吃饭了，大一的时候，但是那个时候你不来。“我没对她说那个时候我很喜欢她。她打了个哈哈过去了，但是我知道当时她在谈恋爱，就在我们学校校庆那天。付完款下楼的路上，可能是彼此陌生感消失了一点，聊的没有那么僵硬了。”喝咖啡吧，我请你。“</p><p>等待咖啡的时候她问我为什么会回老家发展，我告诉她有一根无形的链子把我拴住了。她没有表情，只是哦了一下。我也沉默，不知道该说什么。“正好这个情景，万一你明天相亲的时候尴尬住怎么办？”我问她。我知道我是在强行聊天，她也知道，但是她没说啥顺着我的话题聊了一下，兜兜转转又回去聊我们当初高三的生活，也是我记忆中最开心的生活。</p><p>我们都没有聊啥有意义的，或者说聊的很干燥，就像是大旱的天气只起了一点露珠。回去的路上，我准备叫车，她让我坐地铁，我这乡下来的哪里知道怎么坐地铁。但是我还是和她一起去地铁站了，因为就像我吃完饭走在路上和她说的那样，趁着我还有点心力，把想见的人都见一见，以后或许我路过南京找你你都不出来了。到地铁站我才知道她和我坐的地铁刚好相反，一个一号线向左一个向右。她的车先到了，我目送她上地铁，她没回头。我目光跟随她坐的地铁车厢，没有看到她。</p><p>快到酒店门口，不是很想进去，在门外吹了会风，看到她的微信：“到了吗？”。我沉默了一会，到了。我还是不喜欢大城市，不舒服。</p><p>“也许住一段时间就习惯了”我也觉得这样，但是我没有办法选择在南京工作。或许以后有更强的锁链把我拴住，我或许会习惯吧，这是我的回答。之后再想聊一聊那边的回应就只有嗯嗯嗯了。我也没啥好说的，就让她早点休息为明天的相亲做准备了。</p><p>就像她在吃饭的时候问我有没有相亲，我看着她说没有。她没有回应。她家里在催她相亲，但是我没有，我很穷。</p><p>或许一年后我路过南京会和她聊一下我到南京了，两年后也会这样，但是三年后呢？</p><p>就像在地铁一号线那样，一个向北一个向南，渐渐背离。</p><p>总是要亲手把记忆撕碎才能格外珍惜没有破碎的记忆。</p><p><strong>记于新世纪酒店  2021.12.7   17点39分</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;“欢迎光临！”&lt;/p&gt;
&lt;p&gt;现在的菜馆都喜欢搞这套的，带着点上扬的光，抑扬顿挫。&lt;/p&gt;
&lt;p&gt;“你可不能嘲笑她们！”那倒是，你毕竟也是在服务业，每天在柜台旁对着老头老太太，对着暴发户在那里欢迎光临。我不会点菜，让我自己选我是一定不会来这个餐馆的，但是她选择了这个餐馆我也</summary>
      
    
    
    
    <category term="随感" scheme="https://yelang991115.github.io/categories/%E9%9A%8F%E6%84%9F/"/>
    
    
    <category term="情感" scheme="https://yelang991115.github.io/tags/%E6%83%85%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yelang991115.github.io/2021/12/09/hello-world/"/>
    <id>https://yelang991115.github.io/2021/12/09/hello-world/</id>
    <published>2021-12-09T03:36:58.630Z</published>
    <updated>2021-12-09T03:36:58.630Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
